name: Phase 4 Expert - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Phase-4-Expert/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'Phase-4-Expert/**'
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: -Xmx1024m

jobs:
  # Build and Test E-commerce Microservices Platform
  test-ecommerce-platform:
    name: Test E-commerce Microservices Platform
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [discovery-service, api-gateway, user-service, product-service, order-service, payment-service, notification-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build and test ${{ matrix.service }}
      working-directory: Phase-4-Expert/Advanced-Spring-Microservices/EcommercePlatform/${{ matrix.service }}
      run: |
        mvn clean compile test -B
        
    - name: Generate test report for ${{ matrix.service }}
      working-directory: Phase-4-Expert/Advanced-Spring-Microservices/EcommercePlatform/${{ matrix.service }}
      run: |
        mvn surefire-report:report
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.service }}
        path: Phase-4-Expert/Advanced-Spring-Microservices/EcommercePlatform/${{ matrix.service }}/target/surefire-reports/

  # Build and Test Performance Testing Tools
  test-performance-tools:
    name: Test Performance Testing Tools
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        tool: [BenchmarkingTool, MemoryAnalyzer]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build and test ${{ matrix.tool }}
      working-directory: Phase-4-Expert/Performance-Testing/${{ matrix.tool }}
      run: |
        mvn clean compile test -B
        
    - name: Generate test report for ${{ matrix.tool }}
      working-directory: Phase-4-Expert/Performance-Testing/${{ matrix.tool }}
      run: |
        mvn surefire-report:report
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.tool }}
        path: Phase-4-Expert/Performance-Testing/${{ matrix.tool }}/target/surefire-reports/

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-ecommerce-platform, test-performance-tools]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Start Discovery Service
      working-directory: Phase-4-Expert/Advanced-Spring-Microservices/EcommercePlatform/discovery-service
      run: |
        mvn spring-boot:run &
        sleep 30
        curl -f http://localhost:8761/actuator/health || exit 1
      
    - name: Start API Gateway
      working-directory: Phase-4-Expert/Advanced-Spring-Microservices/EcommercePlatform/api-gateway
      run: |
        mvn spring-boot:run &
        sleep 20
        curl -f http://localhost:8080/actuator/health || exit 1
        
    - name: Run Memory Analyzer
      working-directory: Phase-4-Expert/Performance-Testing/MemoryAnalyzer
      run: |
        mvn spring-boot:run &
        sleep 15
        curl -f http://localhost:8090/memory-analyzer/actuator/health || exit 1
        
    - name: Run Enhanced Benchmarking Tool
      working-directory: Phase-4-Expert/Performance-Testing/BenchmarkingTool
      run: |
        mvn spring-boot:run &
        sleep 15
        curl -f http://localhost:8091/api/benchmark/health || exit 1
        
    - name: Run integration tests
      run: |
        echo "Running end-to-end integration tests..."
        # Test Memory Analyzer API
        curl -X GET "http://localhost:8090/memory-analyzer/api/memory/current"
        
        # Test Enhanced Benchmarking Tool API
        curl -X GET "http://localhost:8091/api/benchmark/scenarios"
        
        # Test quick performance test
        curl -X POST "http://localhost:8091/api/benchmark/quick-test?host=localhost&endpoint=/actuator/health&threads=5"

  # Performance Regression Tests
  performance-tests:
    name: Performance Regression Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Run Memory Analysis
      working-directory: Phase-4-Expert/Performance-Testing/MemoryAnalyzer
      run: |
        mvn spring-boot:run &
        sleep 20
        
        # Run memory analysis tests
        curl -X GET "http://localhost:8090/memory-analyzer/api/memory/current" > memory-results.json
        curl -X GET "http://localhost:8090/memory-analyzer/api/memory/health" > memory-health.json
        
    - name: Run Database Performance Tests
      working-directory: Phase-4-Expert/Performance-Testing/BenchmarkingTool
      run: |
        mvn spring-boot:run &
        sleep 20
        
        # Run database performance test
        curl -X POST "http://localhost:8091/api/benchmark/database/run-sync" \
          -H "Content-Type: application/json" \
          -d '{"testName":"CI Pipeline Database Test","insertCount":100,"selectCount":50}' \
          > database-performance-results.json
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: |
          memory-results.json
          memory-health.json
          database-performance-results.json

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'Phase-4-Expert'
        path: 'Phase-4-Expert'
        format: 'JSON'
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: reports/

  # Build Docker Images (if Dockerfiles exist)
  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-ecommerce-platform, test-performance-tools]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build E-commerce Platform Images
      working-directory: Phase-4-Expert/Advanced-Spring-Microservices/EcommercePlatform
      run: |
        if [ -f docker-compose.yml ]; then
          docker-compose build --no-cache
          echo "E-commerce platform images built successfully"
        else
          echo "No docker-compose.yml found, skipping docker build"
        fi
        
    - name: Test Docker Deployment
      working-directory: Phase-4-Expert/Advanced-Spring-Microservices/EcommercePlatform
      run: |
        if [ -f docker-compose.yml ]; then
          docker-compose up -d
          sleep 60
          docker-compose ps
          docker-compose down
        fi

  # Generate Reports
  generate-reports:
    name: Generate Reports
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests, security-scan]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate comprehensive report
      run: |
        echo "# Phase 4 Expert - CI/CD Pipeline Report" > pipeline-report.md
        echo "" >> pipeline-report.md
        echo "## Build Summary" >> pipeline-report.md
        echo "- E-commerce Platform: ${{ needs.test-ecommerce-platform.result }}" >> pipeline-report.md
        echo "- Performance Tools: ${{ needs.test-performance-tools.result }}" >> pipeline-report.md
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> pipeline-report.md
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> pipeline-report.md
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> pipeline-report.md
        echo "" >> pipeline-report.md
        echo "## Test Results" >> pipeline-report.md
        echo "All test artifacts have been uploaded for review." >> pipeline-report.md
        
    - name: Upload pipeline report
      uses: actions/upload-artifact@v3
      with:
        name: pipeline-report
        path: pipeline-report.md

  # Deployment (to staging environment)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Build deployment artifacts
      working-directory: Phase-4-Expert
      run: |
        # Build all Phase 4 components
        find . -name "pom.xml" -exec dirname {} \; | while read dir; do
          echo "Building $dir"
          (cd "$dir" && mvn clean package -DskipTests)
        done
        
    - name: Simulate deployment
      run: |
        echo "Deploying Phase 4 Expert components to staging environment..."
        echo "- Memory Analyzer deployed ✅"
        echo "- Enhanced Benchmarking Tool deployed ✅"
        echo "- E-commerce Microservices Platform deployed ✅"
        echo "Staging deployment completed successfully!"